state 34 contains 1 shift/reduce conflicts
state 38 contains 1 shift/reduce conflicts
state 43 contains 1 shift/reduce conflicts


-------- Grammar --------

rule 1 Root: 
rule 2 Root: Expressions
rule 3 Expressions: Expression
rule 4 Expressions: Expressions Terminator Expression
rule 5 Expressions: Expressions Terminator
rule 6 Expression: Literal
rule 7 Expression: Call
rule 8 Expression: Constant
rule 9 Expression: Assign
rule 10 Expression: Def
rule 11 Expression: Class
rule 12 Expression: If
rule 13 Terminator: NEWLINE
rule 14 Terminator: ";"
rule 15 Literal: NUMBER
rule 16 Literal: STRING
rule 17 Literal: TRUE
rule 18 Literal: FALSE
rule 19 Literal: NIL
rule 20 Call: IDENTIFIER
rule 21 Call: IDENTIFIER "(" ArgList ")"
rule 22 Call: Expression "." IDENTIFIER
rule 23 Call: Expression "." IDENTIFIER "(" ArgList ")"
rule 24 ArgList: 
rule 25 ArgList: Expression
rule 26 ArgList: ArgList "," Expression
rule 27 Constant: CONSTANT
rule 28 Assign: IDENTIFIER "=" Expression
rule 29 Assign: CONSTANT "=" Expression
rule 30 Def: CAN IDENTIFIER Block
rule 31 Def: CAN IDENTIFIER "(" ParamList ")" Block
rule 32 ParamList: 
rule 33 ParamList: IDENTIFIER
rule 34 ParamList: ParamList "," IDENTIFIER
rule 35 Class: A CONSTANT Block
rule 36 If: IF Expression Block
rule 37 If: IF Expression Block NEWLINE ELSE Block
rule 38 Block: INDENT Expressions DEDENT

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (22)
    on right: 
    on left : 
  Root (23)
    on right: 
    on left : 1 2
  Expressions (24)
    on right: 2 4 5 38
    on left : 3 4 5
  Expression (25)
    on right: 3 4 22 23 25 26 28 29 36 37
    on left : 6 7 8 9 10 11 12
  Terminator (26)
    on right: 4 5
    on left : 13 14
  Literal (27)
    on right: 6
    on left : 15 16 17 18 19
  Call (28)
    on right: 7
    on left : 20 21 22 23
  Constant (29)
    on right: 8
    on left : 27
  Assign (30)
    on right: 9
    on left : 28 29
  Def (31)
    on right: 10
    on left : 30 31
  Class (32)
    on right: 11
    on left : 35
  If (33)
    on right: 12
    on left : 36 37
  ArgList (34)
    on right: 21 23 26
    on left : 24 25 26
  Block (35)
    on right: 30 31 35 36 37
    on left : 38
  ParamList (36)
    on right: 31 34
    on left : 32 33 34

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  A (2) 35
  CAN (3) 30 31
  IF (4) 36 37
  ELSE (5) 37
  NEWLINE (6) 13 37
  NUMBER (7) 15
  STRING (8) 16
  TRUE (9) 17
  FALSE (10) 18
  NIL (11) 19
  IDENTIFIER (12) 20 21 22 23 28 30 31 33 34
  CONSTANT (13) 27 29 35
  INDENT (14) 38
  DEDENT (15) 38
  ";" (16) 14
  "(" (17) 21 23 31
  ")" (18) 21 23 31
  "." (19) 22 23
  "," (20) 26 34
  "=" (21) 28 29

--------- State ---------

state 0


  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6
  $default      reduce using rule 1 (Root)

  If            go to state 2
  Root          go to state 4
  Expressions   go to state 7
  Expression    go to state 9
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 1

  19) Literal : NIL _

  $default      reduce using rule 19 (Literal)


state 2

  12) Expression : If _

  $default      reduce using rule 12 (Expression)


state 3

  20) Call : IDENTIFIER _
  21) Call : IDENTIFIER _ "(" ArgList ")"
  28) Assign : IDENTIFIER _ "=" Expression

  "("           shift, and go to state 21
  "="           shift, and go to state 22
  $default      reduce using rule 20 (Call)


state 4


  $end          shift, and go to state 23


state 5

  35) Class : A _ CONSTANT Block

  CONSTANT      shift, and go to state 24


state 6

  27) Constant : CONSTANT _
  29) Assign : CONSTANT _ "=" Expression

  "="           shift, and go to state 25
  $default      reduce using rule 27 (Constant)


state 7

   2) Root : Expressions _
   4) Expressions : Expressions _ Terminator Expression
   5) Expressions : Expressions _ Terminator

  NEWLINE       shift, and go to state 28
  ";"           shift, and go to state 27
  $default      reduce using rule 2 (Root)

  Terminator    go to state 26

state 8

  30) Def : CAN _ IDENTIFIER Block
  31) Def : CAN _ IDENTIFIER "(" ParamList ")" Block

  IDENTIFIER    shift, and go to state 29


state 9

   3) Expressions : Expression _
  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"

  "."           shift, and go to state 30
  $default      reduce using rule 3 (Expressions)


state 10

  36) If : IF _ Expression Block
  37) If : IF _ Expression Block NEWLINE ELSE Block

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6

  If            go to state 2
  Expression    go to state 31
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 11

   6) Expression : Literal _

  $default      reduce using rule 6 (Expression)


state 12

   7) Expression : Call _

  $default      reduce using rule 7 (Expression)


state 13

  15) Literal : NUMBER _

  $default      reduce using rule 15 (Literal)


state 14

   8) Expression : Constant _

  $default      reduce using rule 8 (Expression)


state 15

  16) Literal : STRING _

  $default      reduce using rule 16 (Literal)


state 16

   9) Expression : Assign _

  $default      reduce using rule 9 (Expression)


state 17

  17) Literal : TRUE _

  $default      reduce using rule 17 (Literal)


state 18

  10) Expression : Def _

  $default      reduce using rule 10 (Expression)


state 19

  18) Literal : FALSE _

  $default      reduce using rule 18 (Literal)


state 20

  11) Expression : Class _

  $default      reduce using rule 11 (Expression)


state 21

  21) Call : IDENTIFIER "(" _ ArgList ")"

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6
  $default      reduce using rule 24 (ArgList)

  If            go to state 2
  ArgList       go to state 32
  Expression    go to state 33
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 22

  28) Assign : IDENTIFIER "=" _ Expression

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6

  If            go to state 2
  Expression    go to state 34
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 23


  $end          shift, and go to state 35


state 24

  35) Class : A CONSTANT _ Block

  INDENT        shift, and go to state 37

  Block         go to state 36

state 25

  29) Assign : CONSTANT "=" _ Expression

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6

  If            go to state 2
  Expression    go to state 38
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 26

   4) Expressions : Expressions Terminator _ Expression
   5) Expressions : Expressions Terminator _

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6
  $default      reduce using rule 5 (Expressions)

  If            go to state 2
  Expression    go to state 39
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 27

  14) Terminator : ";" _

  $default      reduce using rule 14 (Terminator)


state 28

  13) Terminator : NEWLINE _

  $default      reduce using rule 13 (Terminator)


state 29

  30) Def : CAN IDENTIFIER _ Block
  31) Def : CAN IDENTIFIER _ "(" ParamList ")" Block

  INDENT        shift, and go to state 37
  "("           shift, and go to state 41

  Block         go to state 40

state 30

  22) Call : Expression "." _ IDENTIFIER
  23) Call : Expression "." _ IDENTIFIER "(" ArgList ")"

  IDENTIFIER    shift, and go to state 42


state 31

  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  36) If : IF Expression _ Block
  37) If : IF Expression _ Block NEWLINE ELSE Block

  INDENT        shift, and go to state 37
  "."           shift, and go to state 30

  Block         go to state 43

state 32

  21) Call : IDENTIFIER "(" ArgList _ ")"
  26) ArgList : ArgList _ "," Expression

  ")"           shift, and go to state 44
  ","           shift, and go to state 45


state 33

  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  25) ArgList : Expression _

  "."           shift, and go to state 30
  $default      reduce using rule 25 (ArgList)


state 34

  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  28) Assign : IDENTIFIER "=" Expression _

  "."           shift, and go to state 30
  "."           [reduce using rule 28 (Assign)]
  $default      reduce using rule 28 (Assign)


state 35


  $default      accept


state 36

  35) Class : A CONSTANT Block _

  $default      reduce using rule 35 (Class)


state 37

  38) Block : INDENT _ Expressions DEDENT

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6

  If            go to state 2
  Expressions   go to state 46
  Expression    go to state 9
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 38

  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  29) Assign : CONSTANT "=" Expression _

  "."           shift, and go to state 30
  "."           [reduce using rule 29 (Assign)]
  $default      reduce using rule 29 (Assign)


state 39

   4) Expressions : Expressions Terminator Expression _
  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"

  "."           shift, and go to state 30
  $default      reduce using rule 4 (Expressions)


state 40

  30) Def : CAN IDENTIFIER Block _

  $default      reduce using rule 30 (Def)


state 41

  31) Def : CAN IDENTIFIER "(" _ ParamList ")" Block

  IDENTIFIER    shift, and go to state 47
  $default      reduce using rule 32 (ParamList)

  ParamList     go to state 48

state 42

  22) Call : Expression "." IDENTIFIER _
  23) Call : Expression "." IDENTIFIER _ "(" ArgList ")"

  "("           shift, and go to state 49
  $default      reduce using rule 22 (Call)


state 43

  36) If : IF Expression Block _
  37) If : IF Expression Block _ NEWLINE ELSE Block

  NEWLINE       shift, and go to state 50
  NEWLINE       [reduce using rule 36 (If)]
  $default      reduce using rule 36 (If)


state 44

  21) Call : IDENTIFIER "(" ArgList ")" _

  $default      reduce using rule 21 (Call)


state 45

  26) ArgList : ArgList "," _ Expression

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6

  If            go to state 2
  Expression    go to state 51
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 46

   4) Expressions : Expressions _ Terminator Expression
   5) Expressions : Expressions _ Terminator
  38) Block : INDENT Expressions _ DEDENT

  NEWLINE       shift, and go to state 28
  DEDENT        shift, and go to state 52
  ";"           shift, and go to state 27

  Terminator    go to state 26

state 47

  33) ParamList : IDENTIFIER _

  $default      reduce using rule 33 (ParamList)


state 48

  31) Def : CAN IDENTIFIER "(" ParamList _ ")" Block
  34) ParamList : ParamList _ "," IDENTIFIER

  ")"           shift, and go to state 53
  ","           shift, and go to state 54


state 49

  23) Call : Expression "." IDENTIFIER "(" _ ArgList ")"

  A             shift, and go to state 5
  CAN           shift, and go to state 8
  IF            shift, and go to state 10
  NUMBER        shift, and go to state 13
  STRING        shift, and go to state 15
  TRUE          shift, and go to state 17
  FALSE         shift, and go to state 19
  NIL           shift, and go to state 1
  IDENTIFIER    shift, and go to state 3
  CONSTANT      shift, and go to state 6
  $default      reduce using rule 24 (ArgList)

  If            go to state 2
  ArgList       go to state 55
  Expression    go to state 33
  Literal       go to state 11
  Call          go to state 12
  Constant      go to state 14
  Assign        go to state 16
  Def           go to state 18
  Class         go to state 20

state 50

  37) If : IF Expression Block NEWLINE _ ELSE Block

  ELSE          shift, and go to state 56


state 51

  22) Call : Expression _ "." IDENTIFIER
  23) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  26) ArgList : ArgList "," Expression _

  "."           shift, and go to state 30
  $default      reduce using rule 26 (ArgList)


state 52

  38) Block : INDENT Expressions DEDENT _

  $default      reduce using rule 38 (Block)


state 53

  31) Def : CAN IDENTIFIER "(" ParamList ")" _ Block

  INDENT        shift, and go to state 37

  Block         go to state 57

state 54

  34) ParamList : ParamList "," _ IDENTIFIER

  IDENTIFIER    shift, and go to state 58


state 55

  23) Call : Expression "." IDENTIFIER "(" ArgList _ ")"
  26) ArgList : ArgList _ "," Expression

  ")"           shift, and go to state 59
  ","           shift, and go to state 45


state 56

  37) If : IF Expression Block NEWLINE ELSE _ Block

  INDENT        shift, and go to state 37

  Block         go to state 60

state 57

  31) Def : CAN IDENTIFIER "(" ParamList ")" Block _

  $default      reduce using rule 31 (Def)


state 58

  34) ParamList : ParamList "," IDENTIFIER _

  $default      reduce using rule 34 (ParamList)


state 59

  23) Call : Expression "." IDENTIFIER "(" ArgList ")" _

  $default      reduce using rule 23 (Call)


state 60

  37) If : IF Expression Block NEWLINE ELSE Block _

  $default      reduce using rule 37 (If)

