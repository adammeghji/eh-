#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 106)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    19,    18,    20,    25,    41,    11,    12,    13,    14,    15,
    16,    17,    19,    18,    20,    44,    34,    11,    12,    13,
    14,    15,    16,    17,    19,    18,    20,    25,    25,    11,
    12,    13,    14,    15,    16,    17,    19,    18,    20,    25,
    48,    11,    12,    13,    14,    15,    16,    17,    19,    18,
    20,    32,    50,    11,    12,    13,    14,    15,    16,    17,
    19,    18,    20,    30,    29,    11,    12,    13,    14,    15,
    16,    17,    19,    18,    20,    28,    25,    11,    12,    13,
    14,    15,    16,    17,    19,    18,    20,    56,    21,    11,
    12,    13,    14,    15,    16,    17,    19,    18,    20,    23,
    25,    11,    12,    13,    14,    15,    16,    17,    23,    24,
    41,    41,    26,    41,    40,    25,    27,    55,    24,    57,
    45,    46,    46,    53,    59,    54,    41 ]

racc_action_check = [
     0,     0,     0,    33,    30,     0,     0,     0,     0,     0,
     0,     0,    28,    28,    28,    34,    25,    28,    28,    28,
    28,    28,    28,    28,    27,    27,    27,    36,    37,    27,
    27,    27,    27,    27,    27,    27,    26,    26,    26,    38,
    40,    26,    26,    26,    26,    26,    26,    26,    22,    22,
    22,    21,    43,    22,    22,    22,    22,    22,    22,    22,
    41,    41,    41,    19,    18,    41,    41,    41,    41,    41,
    41,    41,    46,    46,    46,    17,     3,    46,    46,    46,
    46,    46,    46,    46,    44,    44,    44,    50,     1,    44,
    44,    44,    44,    44,    44,    44,    20,    20,    20,     2,
    52,    20,    20,    20,    20,    20,    20,    20,    49,     2,
    31,    29,    16,    53,    29,    31,    16,    49,    49,    51,
    35,    51,    35,    47,    54,    47,    56 ]

racc_action_pointer = [
    -2,    88,    93,    57,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    95,    54,    52,    50,
    94,    51,    46,   nil,   nil,     4,    34,    22,    10,    97,
   -10,    96,   nil,   -16,    -2,   102,     8,     9,    20,   nil,
    28,    58,   nil,    46,    82,   nil,    70,   105,   nil,   102,
    82,   101,    81,    99,   112,   nil,   112,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -1,   -39,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -15,   -16,   -17,   -18,   -19,   -20,   -27,   -39,   -39,
   -39,   -39,    -5,   -13,   -14,   -39,   -24,   -39,   -39,   -39,
   -39,   -39,    61,    -4,   -22,   -39,   -25,   -28,   -29,   -30,
   -32,   -39,   -35,   -36,   -24,   -21,   -39,   -39,   -33,   -39,
   -39,   -39,   -26,   -39,   -39,   -38,   -39,   -23,   -31,   -34,
   -37 ]

racc_goto_table = [
     2,    39,    42,    43,    35,    31,     1,    33,    47,   nil,
   nil,    36,    37,    38,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    51,   nil,   nil,    58,   nil,   nil,    60,    36,
   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49 ]

racc_goto_check = [
     2,    13,    13,    13,    12,     3,     1,     3,    14,   nil,
   nil,     3,     3,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,    13,   nil,   nil,    13,     3,
   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2 ]

racc_goto_pointer = [
   nil,     6,     0,   -15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -22,   -28,   -32 ]

racc_goto_default = [
   nil,   nil,   nil,     3,    22,     4,     5,     6,     7,     8,
     9,    10,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 23, :_reduce_1,
  1, 23, :_reduce_2,
  1, 24, :_reduce_3,
  3, 24, :_reduce_4,
  2, 24, :_reduce_5,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 26, :_reduce_none,
  1, 26, :_reduce_none,
  1, 27, :_reduce_15,
  1, 27, :_reduce_16,
  1, 27, :_reduce_17,
  1, 27, :_reduce_18,
  1, 27, :_reduce_19,
  1, 28, :_reduce_20,
  4, 28, :_reduce_21,
  3, 28, :_reduce_22,
  6, 28, :_reduce_23,
  0, 34, :_reduce_24,
  1, 34, :_reduce_25,
  3, 34, :_reduce_26,
  1, 29, :_reduce_27,
  3, 30, :_reduce_28,
  3, 30, :_reduce_29,
  3, 31, :_reduce_30,
  6, 31, :_reduce_31,
  0, 36, :_reduce_32,
  1, 36, :_reduce_33,
  3, 36, :_reduce_34,
  3, 32, :_reduce_35,
  3, 33, :_reduce_36,
  6, 33, :_reduce_37,
  3, 35, :_reduce_38 ]

racc_reduce_n = 39

racc_shift_n = 61

racc_token_table = {
  false => 0,
  :error => 1,
  :A => 2,
  :CAN => 3,
  :IF => 4,
  :ELSE => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :INDENT => 14,
  :DEDENT => 15,
  ";" => 16,
  "(" => 17,
  ")" => 18,
  "." => 19,
  "," => 20,
  "=" => 21 }

racc_nt_base = 22

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "A",
  "CAN",
  "IF",
  "ELSE",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"=\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_1(val, _values, result)
     result = Nodes.new([])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_2(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]])
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_15(val, _values, result)
     result = LiteralNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(false)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_20(val, _values, result)
     result = CallNode.new(nil, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_21(val, _values, result)
     result = CallNode.new(nil, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_22(val, _values, result)
     result = CallNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_24(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_25(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_26(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_27(val, _values, result)
     result = GetConstantNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_28(val, _values, result)
     result = SetLocalNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_29(val, _values, result)
     result = SetConstantNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_30(val, _values, result)
     result = DefNode.new(val[1], [], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_31(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_32(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_33(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_34(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_35(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_36(val, _values, result)
     result = IfNode.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_37(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_38(val, _values, result)
     result = val[1]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
